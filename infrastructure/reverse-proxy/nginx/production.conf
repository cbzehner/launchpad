# HTTP — redirect all traffic to HTTPS
server {
    listen 80;
    # listen [::]:80 default_server ipv6only=on;

    # Here put the domain name the server is to be known as.
    server_name  launchpad.rs www.launchpad.rs;
    access_log   /dev/stdout  main;
    error_log    /dev/stdout info;

    # This is for handling the ACME challenge.
    location /.well-known/acme-challenge/ {
        root /webroot/well-known/acme-challenge/;
    }

    # Use this to force a redirect to the SSL/HTTPS site
    return 301 https://$host$request_uri;
}

# HTTPS service
server { # simple reverse-proxy
    # Enable HTTP/2
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    # Substitute here the domain name for the site
    server_name  launchpad.rs www.launchpad.rs;
    access_log   /dev/stdout  main;
    error_log   /dev/stdout info;

    # Use the Let’s Encrypt certificates
    # Substitute in the domain name
    ssl_certificate /etc/letsencrypt/live/launchpad.rs/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/launchpad.rs/privkey.pem;

    # Replication of the ACME challenge handler.
    location /.well-known/ {
        root /webroot/;
    }

    # Use this for a static HTML site, specifically the default
    # site supplied with the default Nginx container
    # location / {
    #     root   /usr/share/nginx/html;
    #     index  index.html index.htm;
    # }

    # Use this for proxying to a backend service
    # The HTTPS session is terminated at this Proxy.
    # The back end service will see a simple HTTP service.
    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_pass http://oathkeeper:4455/;
        proxy_ssl_session_reuse off;
        proxy_set_header Host $http_host;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }
}
