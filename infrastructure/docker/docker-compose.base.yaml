version: "3.7"

services:
  postgres-database:
    image: postgres:13.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    restart: on-failure

  kratos-migrate:
    image: oryd/kratos:v0.5.5-alpha.1
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    depends_on:
      postgres-database:
        condition: service_healthy
    restart: on-failure

  kratos:
    image: oryd/kratos:v0.5.5-alpha.1
    command: serve -c /etc/config/kratos/kratos.yml
    depends_on:
      kratos-migrate:
        condition: service_started
    # healthcheck:
    #   test: ["CMD-SHELL", "curl", "--fail", "http://localhost/health/ready"]
    #   interval: 10s
    #   retries: 5
    #   start_period: 10s
    #   timeout: 5s
    restart: unless-stopped

  oathkeeper:
    image: oryd/oathkeeper:v0.38
    command: serve proxy -c "/etc/config/oathkeeper/oathkeeper.yml"
    depends_on:
      kratos:
        condition: service_started
    # healthcheck:
    #   test: ["CMD-SHELL", "curl", "--fail", "http://localhost/health/ready"]
    #   interval: 10s
    #   retries: 5
    #   start_period: 10s
    #   timeout: 5s
    # TODO: Front the whole cluster with Traefik or Nginx and close these ports.
    ports:
      - 4455:4455
      - 4456:4456
    restart: on-failure

  web:
    depends_on:
      kratos:
        condition: service_started #service_healthy
    restart: on-failure

  api:
    depends_on:
      postgres-database:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD-SHELL", "curl", "--fail", "http://localhost/healthz"]
    #   interval: 10s
    #   retries: 5
    #   start_period: 10s
    #   timeout: 5s
    restart: on-failure