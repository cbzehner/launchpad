version: "3.7"
# Production specific configuration. See https://docs.docker.com/compose/extends/ for details.

services:
  api:
    image: ghcr.io/cbzehner/launchpad/api:latest
    environment:
      - KRATOS_URL=http://kratos:4433
      - POSTGRES_URL=postgres://api:${API_POSTGRES_PASSWORD}@postgres-database:5432/api
      - ROCKET_ADDRESS=0.0.0.0
      - ROCKET_LOG_LEVEL=normal
      - ROCKET_PORT=4438
      - ROCKET_SECRET_KEY=IkdKUejNsfs1qluIVEaN/Wp1JbdIuP7uwRGC91m+fUs=

  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  kratos:
    command: serve -c /etc/config/kratos/kratos.yml
    environment:
      - WEBSITE_URL
      - DSN=postgres://kratos:${KRATOS_POSTGRES_PASSWORD}@postgres-database:5432/kratos?sslmode=disable&max_conns=20&max_idle_conns=4
      - LOG_LEVEL=info
      - SERVE_PUBLIC_BASE_URL=${WEBSITE_URL}/.ory/kratos/public/
    volumes:
      - type: bind
        source: ./services/auth/kratos/production
        target: /etc/config/kratos

  kratos-migrate:
    environment:
      - DSN=postgres://kratos:${KRATOS_POSTGRES_PASSWORD}@postgres-database:5432/kratos?sslmode=disable&max_conns=20&max_idle_conns=4
      - LOG_LEVEL=info
    volumes:
      - type: bind
        source: ./services/auth/kratos/production
        target: /etc/config/kratos

  oathkeeper:
    environment:
      - LOG_LEVEL=info
    volumes:
    - type: bind
      source: ./services/auth/oathkeeper/production
      target: /etc/config/oathkeeper

  postgres-database:
    environment:
      - POSTGRES_PASSWORD=POSTGRES_USER_PASSWORD
    volumes:
      # Persist this volume across docker-runs?
      - type: bind
        source: ./.data/postgres-data
        target: /var/lib/postgresql/data
      - type: bind
        source: ./services/data/postgres/init-db.sql
        target: /docker-entrypoint-initdb.d/init.sql

  reverse-proxy:
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      oathkeeper:
        condition: service_started
      certbot:
        condition: service_started
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - type: bind
        source: ./services/reverse-proxy/nginx/production.conf
        target: /etc/nginx/conf.d/default.conf

  # TODO: Rethink whether this is a good idea. Containers and configs deployed separately is problematic.
  # watchtower:
  #   image: containrrr/watchtower
  #   command: --interval 300 --cleanup
  #   environment:
  #     - REPO_USER=DOCKER_REGISTRY_USER_EMAIL_ADDRESS
  #     - REPO_PASS=DOCKER_REGISTRY_PERSONAL_ACCESS_TOKEN
  #   network_mode: none
  #   restart: always
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock

  web:
    image: ghcr.io/cbzehner/launchpad/web:latest
    environment:
      - PORT=4435